{{ define "documentation" }}
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }

        .container {
            /*max-width: 800px;*/
            margin: 0;
            padding: 20px;
        }

        h1 {
            color: #375EAB;
        }

        h2 {
            color: #375EAB;
        }

        pre {
            background-color: #f4f4f4;
            padding: 10px;
            overflow-x: auto;
        }

        code {
            font-family: 'Courier New', monospace;
            font-size: 14px;
            color: #333;
        }

        a {
            color: #375EAB;
        }

        .toggleVisible {
            margin-bottom: 20px;
        }

        #pkg-overview, #pkg-index {
            border-bottom: 1px solid #ccc;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
    </style>
    <div class="container mt-5">
        <h1>Documentation</h1>
        <!-- Your documentation content goes here -->
        <p>This is the documentation page for the PredictAI platform.</p>
{{/*        <!DOCTYPE html>*/}}
{{/*        <html>*/}}
        <head>
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <meta name="theme-color" content="#375EAB">

            <title>dal - Go Documentation Server</title>

            <link type="text/css" rel="stylesheet" href="/lib/godoc/style.css">

            <script>window.initFuncs = [];</script>
            <script src="/lib/godoc/jquery.js" defer></script>



            <script>var goVersion = "go1.21.1";</script>
            <script src="/lib/godoc/godocs.js" defer></script>
        </head>
{{/*        <body>*/}}

        <div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
            ...
        </div><!-- #lowframe -->

{{/*        <div id="topbar" class="wide"><div class="container">*/}}
{{/*                <div class="top-heading" id="heading-wide"><a href="/pkg/">Go Documentation Server</a></div>*/}}
{{/*                <div class="top-heading" id="heading-narrow"><a href="/pkg/">GoDoc</a></div>*/}}
{{/*                <a href="#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>*/}}
{{/*                <form method="GET" action="/search">*/}}
{{/*                    <div id="menu">*/}}

{{/*                        <span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>*/}}
{{/*                    </div>*/}}
{{/*                </form>*/}}

{{/*            </div></div>*/}}

        <h2>Package Overview</h2>
        <ul>
            <li>
                <a href="#dal-package">DAL Package</a>
                <ul>
                    <li><a href="#dal-package-index">DAL Index</a></li>
                </ul>
            </li>
            <li>
                <a href="#crab-package">CRAB Package</a>
                <ul>
                    <li><a href="#crab-package-index">CRAB Index</a></li>
                </ul>
            </li>
            <li>
                <a href="#carp-package">CARP Package</a>
                <ul>
                    <li><a href="#carp-package-index">CARP Index</a></li>
                </ul>
            </li>
        </ul>


        <div id="page" class="wide">
            <div class="container">


                <h2 id="dal-package">DAL Package</h2>
                <p>DAL Package contains functions for Data Access Layer, Authentication, Authorization, and Logging methods.</p>



                <!--
                    Copyright 2009 The Go Authors. All rights reserved.
                    Use of this source code is governed by a BSD-style
                    license that can be found in the LICENSE file.
                -->
                <!--
                    Note: Static (i.e., not template-generated) href and id
                    attributes start with "pkg-" to make it impossible for
                    them to conflict with generated attributes (some of which
                    correspond to Go identifiers).
                -->

                <script>
                    document.ANALYSIS_DATA = null;
                    document.CALLGRAPH = null;
                </script>



                <div id="short-nav">
                    {{/*                    <dl>*/}}
                    {{/*                        <dd><code>import "cmpscfa23team2/DAL"</code></dd>*/}}
                    {{/*                    </dl>*/}}
                    <dl>

                    </dl>
                </div>

                <div id="dal-package-index" class="toggleVisible">

                    <div class="expanded">
                        <h2 class="toggleButton" title="Click to hide Index section">DAL Package Index â–¾</h2>

                        <!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
                        <div id="manual-nav">
                            <dl>

                                <dd><a href="#pkg-constants">Constants</a></dd>


                                <dd><a href="#pkg-variables">Variables</a></dd>



                                <dd><a href="#AddPermission">func AddPermission(userRole, action, resource string) error</a></dd>


                                <dd><a href="#AuthenticateUser">func AuthenticateUser(username string, password string) (string, error)</a></dd>


                                <dd><a href="#AuthorizeUser">func AuthorizeUser(userID string, requiredRole string) (bool, error)</a></dd>


                                <dd><a href="#ChangePassword">func ChangePassword(userID string, newPassword string) error</a></dd>


                                <dd><a href="#CheckPermission">func CheckPermission(userRole, action, resource string) (bool, error)</a></dd>


                                <dd><a href="#CloseDb">func CloseDb()</a></dd>


                                <dd><a href="#ComparePassword">func ComparePassword(hashedPassword []byte, password string) error</a></dd>


                                <dd><a href="#ConvertPredictionToJSON">func ConvertPredictionToJSON(predictionResult string) (string, error)</a></dd>


                                <dd><a href="#CreateScraperEngine">func CreateScraperEngine(engineName, engineDescription string) (string, error)</a></dd>


                                <dd><a href="#CreateUser">func CreateUser(userName, userLogin, userRole string, userPassword string, activeOrNot bool) (string, error)</a></dd>


                                <dd><a href="#CreateWebCrawler">func CreateWebCrawler(sourceURL string) (string, error)</a></dd>


                                <dd><a href="#DeactivateUser">func DeactivateUser(userID string) error</a></dd>


                                <dd><a href="#DeleteUser">func DeleteUser(userID string) error</a></dd>


                                <dd><a href="#EngineIDExists">func EngineIDExists(engineID string) (bool, error)</a></dd>


                                <dd><a href="#FetchUserIDByName">func FetchUserIDByName(userName string) (string, error)</a></dd>


                                <dd><a href="#GenerateToken">func GenerateToken(userID string) (string, error)</a></dd>


                                <dd><a href="#GetRandomURL">func GetRandomURL() (string, error)</a></dd>


                                <dd><a href="#GetURLTagsAndDomain">func GetURLTagsAndDomain(id string) (map[string]interface{}, string, error)</a></dd>


                                <dd><a href="#GetURLsAndTags">func GetURLsAndTags() (map[string]map[string]interface{}, error)</a></dd>


                                <dd><a href="#GetURLsFromDomain">func GetURLsFromDomain(domain string) ([]string, error)</a></dd>


                                <dd><a href="#GetURLsOnly">func GetURLsOnly() ([]string, error)</a></dd>


                                <dd><a href="#GetUUIDFromURLAndDomain">func GetUUIDFromURLAndDomain(url, domain string) (string, error)</a></dd>


                                <dd><a href="#GetUserRole">func GetUserRole(userID string) (string, error)</a></dd>


                                <dd><a href="#HasPermission">func HasPermission(userID, action, resource string) (bool, error)</a></dd>


                                <dd><a href="#HashPassword">func HashPassword(password string) ([]byte, error)</a></dd>


                                <dd><a href="#InitDB">func InitDB() error</a></dd>


                                <dd><a href="#InsertLog">func InsertLog(statusCode, message, goEngineArea string) error</a></dd>


                                <dd><a href="#InsertOrUpdateStatusCode">func InsertOrUpdateStatusCode(statusCode, statusMessage string) error</a></dd>


                                <dd><a href="#InsertPrediction">func InsertPrediction(engineID string, predictionInfo string) error</a></dd>


                                <dd><a href="#InsertSampleEngine">func InsertSampleEngine(engineID, engineName, engineDescription string) error</a></dd>


                                <dd><a href="#InsertURL">func InsertURL(url, domain string, tags map[string]interface{}) (string, error)</a></dd>


                                <dd><a href="#IsUserActive">func IsUserActive(userID string) (bool, error)</a></dd>


                                <dd><a href="#LogoutUser">func LogoutUser(userID string) error</a></dd>


                                <dd><a href="#PerformMLPrediction">func PerformMLPrediction(inputData string) string</a></dd>


                                <dd><a href="#RefreshToken">func RefreshToken(oldRefreshToken string) (string, string, error)</a></dd>


                                <dd><a href="#RegisterUser">func RegisterUser(username string, login string, role string, password string, active bool) (string, error)</a></dd>


                                <dd><a href="#StoreLog">func StoreLog(status_code string, message string, goEngineArea string) error</a></dd>


                                <dd><a href="#UpdateURL">func UpdateURL(id, url, domain string, tags map[string]interface{}) error</a></dd>


                                <dd><a href="#UpdateUser">func UpdateUser(userID, userName, userLogin, userRole, userPassword string) error</a></dd>


                                <dd><a href="#UpdateUserRole">func UpdateUserRole(userID, newRole string) error</a></dd>


                                <dd><a href="#ValidateToken">func ValidateToken(tokenString string) (bool, error)</a></dd>


                                <dd><a href="#WriteLog">func WriteLog(logID string, status_code string, message string, goEngineArea string, dateTime time.Time) error</a></dd>



                                <dd><a href="#JSON_Data_Connect">type JSON_Data_Connect</a></dd>




                                <dd><a href="#Log">type Log</a></dd>


                                <dd><a href="#GetLog">func GetLog() ([]Log, error)</a></dd>


                                <dd><a href="#GetSuccess">func GetSuccess() ([]Log, error)</a></dd>




                                <dd><a href="#LogStatusCodes">type LogStatusCodes</a></dd>




                                <dd><a href="#Permission">type Permission</a></dd>


                                <dd><a href="#GetPermissionsForRole">func GetPermissionsForRole(userRole string) ([]Permission, error)</a></dd>


                                <dd><a href="#NewPermission">func NewPermission(action, resource string) Permission</a></dd>




                                <dd><a href="#Prediction">type Prediction</a></dd>




                                <dd><a href="#User">type User</a></dd>


                                <dd><a href="#GetAllUsers">func GetAllUsers() ([]*User, error)</a></dd>


                                <dd><a href="#GetUserByID">func GetUserByID(userID string) (*User, error)</a></dd>


                                <dd><a href="#GetUserByLogin">func GetUserByLogin(userLogin string) (*User, error)</a></dd>


                                <dd><a href="#GetUsersByRole">func GetUsersByRole(role string) ([]*User, error)</a></dd>




                            </dl>
                        </div><!-- #manual-nav -->









                    </div><!-- .expanded -->
                </div><!-- #pkg-index -->




                <h2 id="pkg-constants">Constants</h2>


                <pre>const <span id="SECRET_KEY">SECRET_KEY</span> = &#34;SECRETKEY123!&#34;</pre>



                <h2 id="pkg-variables">Variables</h2>


                <pre>var <span id="DB">DB</span> * sql .</pre>





                <h2 id="AddPermission">func AddPermission



                </h2>
                <pre>func AddPermission(userRole, action, resource string) error</pre>
                <p>AddPermission allows for adding a new permission to a user role.







                <h2 id="AuthenticateUser">func AuthenticateUser



                </h2>
                <pre>func AuthenticateUser(username string, password string) (string, error)</pre>
                <p>The code defines a function that authenticates a user by querying a database with a username and password, comparing the hashed password with the provided one, and generating a token for the user, returning the token or an error.







                <h2 id="AuthorizeUser">func AuthorizeUser



                </h2>
                <pre>func AuthorizeUser(userID string, requiredRole string) (bool, error)</pre>
                <p>AuthorizeUser verifies if a user has the necessary role to perform a certain action.







                <h2 id="ChangePassword">func ChangePassword</a>



                </h2>
                <pre>func ChangePassword(userID string, newPassword string) error</pre>
                <p>Takes a user ID and a new password as input and returns an error if there is any issue with the password change process







                <h2 id="CheckPermission">func CheckPermission



                </h2>
                <pre>func CheckPermission(userRole, action, resource string) (bool, error)</pre>
                <p>CheckPermission verifies if a specific role has permission to perform a certain action on a given resource.







                <h2 id="CloseDb">func CloseDb



                </h2>
                <pre>func CloseDb()</pre>
                <p>defines a function to close a database connection
                    and logs any errors or a success message if the connection is closed successfully.







                <h2 id="ComparePassword">func ComparePassword



                </h2>
                <pre>func ComparePassword(hashedPassword []byte, password string) error</pre>
                <p>defines a function that compares a hashed password stored as a byte slice with a provided password string using the bcrypt library for secure password authentication.







                <h2 id="ConvertPredictionToJSON">func ConvertPredictionToJSON



                </h2>
                <pre>func ConvertPredictionToJSON(predictionResult string) (string, error)</pre>
                <p>Convert prediction result to JSON
                <p>defines a function that converts a given prediction result string into a JSON format, logging a success message and returning the JSON string or an error.







                <h2 id="CreateScraperEngine">func CreateScraperEngine



                </h2>
                <pre>func CreateScraperEngine(engineName, engineDescription string) (string, error)</pre>
                <p>Function to create a new scraper engine
                <p>defines a function called &quot;CreateScraperEngine&quot; that creates a scraper engine in a database, and it returns the engine&apos;s ID or an error.







                <h2 id="CreateUser">func CreateUser



                </h2>
                <pre>func CreateUser(userName, userLogin, userRole string, userPassword string, activeOrNot bool) (string, error)</pre>
                <p>CreateUser inserts a new user into the database.
                <p>it creates a user in a database, logs the user ID if successful, and returns the user&apos;s ID or an error.







                <h2 id="CreateWebCrawler">func CreateWebCrawler</h2>
                <pre>func CreateWebCrawler(sourceURL string) (string, error)</pre>
                <p>Function to create a new web crawler
                <p>It creates a web crawler with a specified source URL and logs the crawler&apos;s ID if successful.

                <h2 id="DeactivateUser">func DeactivateUser</h2>
                <pre>func DeactivateUser(userID string) error</pre>
                <p>DeactivateUser marks a user as inactive.
                <p>It deactivates a user in a database by calling a stored procedure with the provided userID and logs the outcome, handling any errors that may occur.

                <h2 id="DeleteUser">func DeleteUser</h2>
                <pre>func DeleteUser(userID string) error</pre>
                <p>DeleteUser removes a user from the database.
                <p>It defines a function that deletes a user with the given userID from a database using a stored procedure and logs the operation, returning any potential errors.

                <h2 id="EngineIDExists">func EngineIDExists</h2>
                <pre>func EngineIDExists(engineID string) (bool, error)</pre>
                <p>Function to check if the engine_id exists in scraper_engine table
                <p>This function checks if a given engine ID exists in a database table and returns a boolean indicating existence or an error.

                <h2 id="FetchUserIDByName">func FetchUserIDByName</h2>
                <pre>func FetchUserIDByName(userName string) (string, error)</pre>
                <p>FetchUserIDByName retrieves a user&apos;s ID using their username.
                <p>This function retrieves a user&apos;s ID by calling a stored procedure in a database and logs the result, handling any errors that may occur.

                <h2 id="GenerateToken">func GenerateToken</h2>
                <pre>func GenerateToken(userID string) (string, error)</pre>
                <p>This code generates a JWT token with a user ID and expiration time, using HMAC-SHA256 for signing.

                <h2 id="GetRandomURL">func GetRandomURL</h2>
                <pre>func GetRandomURL() (string, error)</pre>
                <p>Function to fetch a random URL
                <p>It defines a function that retrieves a random URL from a database, logs the URL, and returns it as a string, handling any potential errors during the database query.

                <h2 id="GetURLTagsAndDomain">func GetURLTagsAndDomain</h2>
                <pre>func GetURLTagsAndDomain(id string) (map[string]interface{}, string, error)</pre>
                <p>Function to fetch URL tags and domain by ID
                <p>It defines a function that retrieves tags and a domain from a database using a specified ID, logs the results, and returns them in a map and a string along with potential errors.

                <h2 id="GetURLsAndTags">func GetURLsAndTags</h2>
                <pre>func GetURLsAndTags() (map[string]map[string]interface{}, error)</pre>
                <p>Function to fetch all URLs with their tags
                <p>It retrieves URL and tag data from a database, processes it into a map of URLs mapped to corresponding tags, and handles potential errors, logging intermediate results.

                <h2 id="GetURLsFromDomain">func GetURLsFromDomain</h2>
                <pre>func GetURLsFromDomain(domain string) ([]string, error)</pre>
                <p>Function to fetch URLs from a specific domain
                <p>Defines a function that queries a database to retrieve URLs associated with a given domain, processes the results, and returns the URLs in a slice while handling potential errors and logging.

                <h2 id="GetURLsOnly">func GetURLsOnly</h2>
                <pre>func GetURLsOnly() ([]string, error)</pre>
                <p>Function to fetch all URLs (just the &apos;url&apos; column)
                <p>Defines a Go function called &quot;GetURLsOnly&quot; that queries a database for URLs and returns them in a slice, handling potential errors along the way.

                <h2 id="GetUUIDFromURLAndDomain">func GetUUIDFromURLAndDomain</h2>
                <pre>func GetUUIDFromURLAndDomain(url, domain string) (string, error)</pre>
                <p>Function to fetch UUID from URL and domain
                <p>This function retrieves a UUID from a database by calling a stored procedure with a given URL and domain, and it logs the result if successful.

                <h2 id="GetUserRole">func GetUserRole</h2>
                <pre>func GetUserRole(userID string) (string, error)</pre>
                <p>GetUserRole fetches the role associated with a given user ID.
                <p>This function retrieves a user&apos;s role from a database using the provided userID and logs the result, handling any potential errors.

                <h2 id="HasPermission">func HasPermission</h2>
                <pre>func HasPermission(userID, action, resource string) (bool, error)</pre>
                <p>HasPermission is a higher-level function to check if a user has a specific permission.
                <p>It defines a function, HasPermission, which checks if a user has a specific permission by first retrieving the user&apos;s role, then verifying the permission for a given action and resource, and logging the result along with potential errors.

                <h2 id="HashPassword">func HashPassword</h2>
                <pre>func HashPassword(password string) ([]byte, error)</pre>
                <p>Add the bcrypt hashing utility functions
                <p>It defines function that hashes a provided password using the bcrypt hashing algorithm with a default cost and returns the hashed password as a byte slice or an error if encountered.

                <h2 id="InitDB">func InitDB</h2>
                <pre>func InitDB() error</pre>
                <p>It initializes a database connection using configuration data from a JSON file and logs any errors encountered during the process.

                <h2 id="InsertLog">func InsertLog</h2>
                <pre>func InsertLog(statusCode, message, goEngineArea string) error</pre>
                <p>Function to insert a log entry into the database
                <p>It  inserts a log entry into a database using a SQL stored procedure, handling any errors that may occur during the execution.

                <h2 id="InsertOrUpdateStatusCode">func InsertOrUpdateStatusCode</h2>
                <pre>func InsertOrUpdateStatusCode(statusCode, statusMessage string) error</pre>
                <p>It defines a function that executes a SQL stored procedure &quot;insert_or_update_status_code&quot; with provided parameters &quot;statusCode&quot;
                    and &quot;statusMessage&quot; using the &quot;DB&quot; database connection and returns any potential errors.

                <h2 id="InsertPrediction">func InsertPrediction</h2>
                <pre>func InsertPrediction(engineID string, predictionInfo string) error</pre>
                <p>Function to insert a new prediction
                The function InsertPrediction, that checks the existence of an engineID, logs the result and inserts predictionInfo into a database table if the engineID exists, handling errors along the way</p>

                <h2 id="InsertSampleEngine">func insertSampleEngine</h2>
                <pre>func InsertSampleEngine(engineID, engineName, engineDescription string) error</pre>
                <p>Function to insert a sample engine ID into scraper_engine table</p>
                <p>Function inserts a sample engine&apos;s information into a database table, logs success, and returns any encountered errors</p>

                <h2 id="InsertURL">func InsertURL</h2>
                <pre>func InsertURL(url, domain string, tags map[string])(string, error)</pre>
                <p>Function to insert a new URL
                <p>Function &quot;InsertURL,&quot; inserts a URL into a database along with associated tags and logs the operation, returning the generated ID or an error.

                <h2 id="IsUserActive">func IsUserActive</h2>
                <pre>func IsUserActive(userID string)(bool, error)</pre>
                <p>IsUserActive checks if a user is currently marked as active based on their user ID.
                <p>It defines a function &quot;IsUserActive&quot; that checks the activity status of a user in a database and returns a boolean indicating whether the user is active or not, along with an error if any.


                <h2 id="LogoutUser">func LogoutUser

                </h2>
                <pre>func LogoutUser(userID string) error</pre>
                <p>This code defines a function called LogoutUser that takes a userID as a parameter and it uses the database connection.
                    (DB) to execute a SQL stored procedure to log out a user with the specified userID,
                    returning any potential errors encountered during the database operation.



                <h2 id="PerformMLPrediction">func PerformMLPrediction



                </h2>
                <pre>func PerformMLPrediction(inputData string) string</pre>
                <p>Simulated ML model prediction function
                <p>It defines a function that simulates an ML model prediction with a 2-second delay
                    and logs a success message before returning a prediction result as a formatted string.



                <h2 id="RefreshToken">func RefreshToken



                </h2>
                <pre>func RefreshToken(oldRefreshToken string) (string, string, error)</pre>
                <p>It defines a function called RefreshToken that takes an old refresh token as input, validates it against a database, generates a new access token and refresh token,
                    and updates the database with the new refresh token




                <h2 id="RegisterUser">func RegisterUser



                </h2>
                <pre>func RegisterUser(username string, login string, role string, password string, active bool) (string, error)</pre>
                <p>It defines a function &quot;RegisterUser&quot; that securely registers a user by hashing their password
                    and storing their information in a database, returning a user ID or an error.




                <h2 id="StoreLog">func StoreLog

                </h2>
                <pre>func StoreLog(status_code string, message string, goEngineArea string) error</pre>
                <p>This code prepares and executes a SQL statement to store log information in a database, logging the status of the SQL operations during the process



                <h2 id="UpdateURL">func UpdateURL



                </h2>
                <pre>func UpdateURL(id, url, domain string, tags map[string]interface{}) error</pre>
                <p>Function to update an existing URL
                <p>It defines a function UpdateURL that updates a URL record in a database, converting tags into JSON format and logging the update action.




                <h2 id="UpdateUser">func UpdateUser


                </h2>
                <pre>func UpdateUser(userID, userName, userLogin, userRole, userPassword string) error</pre>
                <p>UpdateUser updates the details of a user.
                <p>It defines a function &quot;UpdateUser&quot; that calls a stored procedure to update a user&apos;s information in a database, logs the user&apos;s ID, and returns any encountered error.



                <h2 id="UpdateUserRole">func UpdateUserRole



                </h2>
                <pre>func UpdateUserRole(userID, newRole string) error</pre>
                <p>UpdateUserRole allows for changing the role associated with a user.
                <p>It defines a function UpdateUserRole that updates a user&apos;s role in a database using a stored procedure and logs the outcome, handling potential errors.


                <h2 id="ValidateToken">func ValidateToken


                </h2>
                <pre>func ValidateToken(tokenString string) (bool, error)</pre>
                <p>This code defines a function that validates a JSON Web Token (JWT) by parsing it
                    verifying its signature using a secret key,
                    and checking its expiration time



                <h2 id="WriteLog">func WriteLog



                </h2>
                <pre>func WriteLog(logID string, status_code string, message string, goEngineArea string, dateTime time.Time) error</pre>
                <p>WriteLog writes a log entry to the database
                <p>This code defines a function WriteLog that validates a status code, inserts a log entry into a database,
                    and logs the execution process, handling potential errors along the way.


                <h2 id="JSON_Data_Connect">type JSON_Data_Connect

                </h2>
                <p>This code defines a Go struct named &quot;JSON_Data_Connect&quot; with fields for username, password, hostname,
                    and database, each tagged for JSON serialization.

                <pre>type JSON_Data_Connect struct {
<span id="JSON_Data_Connect.Username"></span>    Username string `json:&#34;Username&#34;`
<span id="JSON_Data_Connect.Password"></span>    Password string `json:&#34;Password&#34;`
<span id="JSON_Data_Connect.Hostname"></span>    Hostname string `json:&#34;Hostname&#34;`
<span id="JSON_Data_Connect.Database"></span>    Database string `json:&#34;Database&#34;`
}
</pre>















                <h2 id="Log">type Log

                </h2>
                <p>Log struct models the data structure of a log entry in the database
                <p>This code defines a Go struct named &quot;Log&quot; with fields for
                    log ID, status code, message, GoEngineArea, and date-time information.

                <pre>type Log struct {
<span id="Log.LogID"></span>    LogID string

<span id="Log.Message"></span>    Message      string
<span id="Log.GoEngineArea"></span>    GoEngineArea string
<span id="Log.DateTime"></span>    DateTime     []uint8
    <span class="comment">// contains filtered or unexported fields</span>
}
</pre>











                <h2 id="GetLog">func GetLog

                </h2>
                <pre>func GetLog() ([]Log, error)</pre>
                <p>GetLog - Reads the log
                <p>This Go code defines a function, &quot;GetLog,&quot; that prepares and queries a database for logs, logging both successful and failed operations,
                    and returns a log objects along with potential errors.





                <h2 id="GetSuccess">func GetSuccess



                </h2>
                <pre>func GetSuccess() ([]Log, error)</pre>
                <p>GetSuccess - Uses a Procedure to gather all the &apos;Success&apos; rows in the DB
                <p>The code defines a function GetSuccess that retrieves log entries with a &quot;Success&quot; status code from a database, logs various status messages.









                <h2 id="LogStatusCodes">type LogStatusCodes

                </h2>
                <p>This code defines a Go struct named LogStatusCodes with two fields, &quot;StatusCode&quot; and
                    &quot;StatusMessage,&quot; to represent status code and associated status messages.

                <pre>type LogStatusCodes struct {
<span id="LogStatusCodes.StatusCode"></span>    StatusCode    string
<span id="LogStatusCodes.StatusMessage"></span>    StatusMessage string
}
</pre>















                <h2 id="Permission">type Permission



                </h2>
                <p>Permission represents a user&apos;s permission to perform an action on a resource.
                <p>The code defines a struct named &quot;Permission&quot; with two fields, &quot;Action&quot; and &quot;Resource,&quot; to represent permissions for actions on specific resources.

                <pre>type Permission struct {
<span id="Permission.Action"></span>    Action   string
<span id="Permission.Resource"></span>    Resource string
}
</pre>











                <h2 id="GetPermissionsForRole">func GetPermissionsForRole



                </h2>
                <pre>func GetPermissionsForRole(userRole string) ([]Permission, error)</pre>
                <p>GetPermissionsForRole fetches all permissions associated with a given user role.
                <p>This code defines a function that retrieves permissions for a given user role from a database using a stored procedure
                    and returns them as a slice of Permission objects while handling potential errors.





                <h2 id="NewPermission">func NewPermission



                </h2>
                <pre>func NewPermission(action, resource string) Permission</pre>
                <p>NewPermission creates a new Permission object.
                <p>This code defines a Go function named &quot;NewPermission&quot; that creates
                    and returns a new &quot;Permission&quot; struct with provided &quot;action&quot; and &quot;resource&quot; strings.





                <h2 id="Prediction">type Prediction



                </h2>
                <p>Prediction struct models the data structure of a prediction in the database
                <p>This code defines a struct named &quot;Prediction&quot; with fields for PredictionID, EngineID, InputData, PredictionInfo, and PredictionTime.

                <pre>type Prediction struct {
<span id="Prediction.PredictionID"></span>    PredictionID  string
<span id="Prediction.EngineID"></span>    EngineID      string
<span id="Prediction.InputData"></span>    InputData      string
<span id="Prediction.PredictionInfo"></span>    PredictionInfo string
<span id="Prediction.PredictionTime"></span>    PredictionTime string
}
</pre>















                <h2 id="User">type User



                </h2>
                <p>This code defines a struct called &quot;User&quot; with fields representing userID, name, login, role, password, active status, and date added.

                <pre>type User struct {

<span id="User.UserID"></span>    UserID        string
<span id="User.UserName"></span>    UserName      string
<span id="User.UserLogin"></span>    UserLogin    string
<span id="User.UserRole"></span>    UserRole      string
<span id="User.UserPassword"></span>    UserPassword  []byte
<span id="User.ActiveOrNot"></span>    ActiveOrNot   bool
<span id="User.UserDateAdded"></span>    UserDateAdded string
}
</pre>











                <h2 id="GetAllUsers">func GetAllUsers



                </h2>
                <pre>func GetAllUsers() ([]*User, error)</pre>
                <p>GetAllUsers retrieves all registered users.
                <p>This code defines a function, GetAllUsers, that retrieves user data from a database, processes it,
                    and returns a  user objects while handling potential errors and resource cleanup.





                <h2 id="GetUserByID">func GetUserByID



                </h2>
                <pre>func GetUserByID(userID string) (*User, error)</pre>
                <p>GetUserByID retrieves a specific user by their ID.
                <p>This code defines a function called GetUserByID that retrieves a user&apos;s information from a database by their ID
                    and returns a pointer to a User struct along with an error.





                <h2 id="GetUserByLogin">func GetUserByLogin



                </h2>
                <pre>func GetUserByLogin(userLogin string) (*User, error)</pre>
                <p>This code defines a function that retrieves a user from a database using a stored procedure based on a given user login, and returns the user&apos;s information or an error.





                <h2 id="GetUsersByRole">func GetUsersByRole



                </h2>
                <pre>func GetUsersByRole(role string) ([]*User, error)</pre>
                <p>GetUsersByRole fetches all users with a specific role.
                <p>This code defines a function that queries a database to retrieve a list of users by their role and logs various steps in the process,
                    returning the list of users and any encountered errors.

                    <!-- Documentation for CRAB Package -->
                <h2 id="crab-package">CRAB Package</h2>
                <p>Contains functions and types for the CRAB web crawling and scraping module.</p>
                <!-- Index for CRAB Package -->
                <div id="crab-package-index" class="toggleVisible">
                    <div class="expanded">
                        <h2 class="toggleButton" title="Click to hide Index section">CRAB Package Index â–¾</h2>
                        <div id="manual-nav">
                            <dl>
                                <dt>Variables</dt>
                                <dd><a href="#urlQueue">urlQueue</a></dd>
                                <dd><a href="#visited">visited</a></dd>
                                <dd><a href="#domainConfigurations">domainConfigurations</a></dd>

                                <!-- Index for Types -->
                                <dt>Structs</dt>
                                <dd><a href="#URLData">type URLData struct</a></dd>
                                <dd><a href="#MonthData">type MonthData struct</a></dd>
                                <dd><a href="#AirfareData">type AirfareData struct</a></dd>
                                <dd><a href="#YearData">type YearData struct</a></dd>
                                <dd><a href="#GasolineData">type GasolineData struct</a></dd>
                                <dd><a href="#PropertyData">type PropertyData struct</a></dd>
                                <dd><a href="#ScraperConfig">type ScraperConfig struct</a></dd>
                                <dd><a href="#DomainConfig">type DomainConfig struct</a></dd>
                                <dd><a href="#Metadata">type Metadata struct</a></dd>
                                <dd><a href="#GenericData">type GenericData struct</a></dd>
                                <dd><a href="#ItemData">type ItemData struct</a></dd>
                                <!-- Index for Functions -->
                                <dt>Functions</dt>
                                <dd><a href="#InitializeCrawling">func InitializeCrawling()</a></dd>
                                <dd><a href="#getURLsToCrawl">func getURLsToCrawl() []URLData</a></dd>
                                <dd><a href="#InsertData">func InsertData(data ItemData, filename string) error</a></dd>
                                <dd><a href="#crawlURL">func crawlURL(urlData URLData, ch chan<- URLData, wg *sync.WaitGroup)</a></dd>
                                <dd><a href="#createSiteMap">func createSiteMap(urls []URLData) error</a></dd>
                                <dd><a href="#isURLAllowedByRobotsTXT">func isURLAllowedByRobotsTXT(urlStr string) bool</a></dd>
                                <dd><a href="#threadedCrawl">func threadedCrawl(urls []URLData, concurrentCrawlers int)</a></dd>
                                <dd><a href="#Scrape">func Scrape(startingURL string, domainConfig DomainConfig, wg *sync.WaitGroup)</a></dd>
                                <dd><a href="#testScrape">func testScrape(domainName string)</a></dd>
                                <dd><a href="#airdatatest">func airdatatest()</a></dd>
                                <dd><a href="#scrapeInflationData">func scrapeInflationData()</a></dd>
                                <dd><a href="#scrapeGasInflationData">func scrapeGasInflationData()</a></dd>
                                <dd><a href="#scrapeHousingData">func scrapeHousingData()</a></dd>
                                <dd><a href="#GetRandomUserAgent">func GetRandomUserAgent() string</a></dd>

                            </dl>
                        </div><!-- #manual-nav -->
                    </div><!-- .expanded -->
                </div><!-- #crab-package-index -->

                <h3 id="CRAB Variables">Variables in CRAB</h3>
                <h2 id="urlQueue">urlQueue</h2>
                <pre>var urlQueue = make(chan string, 1000)</pre>
                <p>Channel used for queuing URLs to be processed by the scraper.</p>
                <h2 id="visited">visited</h2>
                <pre>var visited = make(map[string]bool)</pre>
                <p>Map used for keeping track of URLs that have already been visited by the scraper.</p>
                <h2 id="domainConfigurations">domainConfigurations</h2>
                <pre>var domainConfigurations = map[string]DomainConfig{...}</pre>
                <p>Maps domain names to their respective scraping configurations, specifying selectors and structures for each domain.</p>

                <!-- Document each function in crawler.go -->
                <h3 id="crawler-go-functions">Functions in crawler.go</h3>

                <!-- InitializeCrawling Function -->
                <h2 id="InitializeCrawling">InitializeCrawling</h2>
                <pre>func InitializeCrawling()</pre>
                <p>InitializeCrawling starts the web crawling process. It fetches URLs to crawl from a predefined list and initiates a threaded crawl process with a specified number of concurrent crawlers.</p>

                <!-- getURLsToCrawl Function -->
                <h2 id="getURLsToCrawl">getURLsToCrawl</h2>
                <pre>func getURLsToCrawl() []URLData</pre>
                <p>Returns a slice of URLData representing a list of URLs to be crawled. This function is used internally within the InitializeCrawling function.</p>

                <!-- InsertData Function -->
                <h2 id="InsertData">InsertData</h2>
                <pre>func InsertData(data ItemData, filename string) error</pre>
                <p>Takes structured data (ItemData) and a filename, marshals the data into JSON format, and writes it to the specified file. Returns an error if any occurs during the marshaling or file operations.</p>

                <!-- crawlURL Function -->
                <h2 id="crawlURL">crawlURL</h2>
                <pre>func crawlURL(urlData URLData, ch chan<- URLData, wg *sync.WaitGroup)</pre>
                <p>The core function responsible for crawling a single URL. It takes URLData, a channel to send crawled data, and a WaitGroup to handle concurrency. It uses the Colly library for crawling and processes each URL based on the received HTML content.</p>

                <!-- createSiteMap Function -->
                <h2 id="createSiteMap">createSiteMap</h2>
                <pre>func createSiteMap(urls []URLData) error</pre>
                <p>Generates a sitemap from the given slice of URLData. Each URLData contains links found at a specific URL. The function marshals this data into JSON format and writes it to a file named "siteMap.json". Returns an error if the marshaling or file operations fail.</p>

                <!-- isURLAllowedByRobotsTXT Function -->
                <h2 id="isURLAllowedByRobotsTXT">isURLAllowedByRobotsTXT</h2>
                <pre>func isURLAllowedByRobotsTXT(urlStr string) bool</pre>
                <p>Checks if the given URL is allowed by the site's robots.txt file. It parses the URL to extract the domain, fetches the robots.txt file from the domain, and tests if the URL is allowed. Returns true if allowed, false otherwise.</p>

                <!-- threadedCrawl Function -->
                <h2 id="threadedCrawl">threadedCrawl</h2>
                <pre>func threadedCrawl(urls []URLData, concurrentCrawlers int)</pre>
                <p>Manages the concurrent crawling of multiple URLs. It takes a slice of URLData and an integer specifying the number of concurrent crawlers. The function sets up each crawler with rate limiting and starts the crawling process. The resulting crawled data is used to create a sitemap.</p>



                <h3 id="scarper-go-functions">Functions in scarper.go</h3>

                <!-- ReadCSV Function -->
                <h2 id="ReadCSV">ReadCSV</h2>
                <pre>func ReadCSV(filePath string) ([]PropertyData, error)</pre>
                <p>Reads a CSV file from the given file path, parses the data, and returns a slice of PropertyData. Returns an error if it fails to read or parse the CSV file.</p>

                <!-- Scrape Function -->
                <h2 id="Scrape">Scrape</h2>
                <pre>func Scrape(startingURL string, domainConfig DomainConfig, wg *sync.WaitGroup)</pre>
                <p>Performs the web scraping process for a given domain. Takes a URL to start scraping from, a DomainConfig for scraping rules, and a WaitGroup for concurrency control. Collects scraped data and saves it to a JSON file.</p>

                <!-- testScrape Function -->
                <h2 id="testScrape">testScrape</h2>
                <pre>func testScrape(domainName string)</pre>
                <p>A testing function for the scraper. Takes a domain name and triggers the Scrape function using predefined test URLs for the domain. Validates the scraping logic for different domains.</p>

                <!-- airdatatest Function -->
                <h2 id="airdatatest">airdatatest</h2>
                <pre>func airdatatest()</pre>
                <p>Specific scraper implementation for airfare data. Fetches data from a specific URL, processes it according to predefined scraping rules, then writes the scraped data to JSON files.</p>

                <!-- scrapeInflationData Function -->
                <h2 id="scrapeInflationData">scrapeInflationData</h2>
                <pre>func scrapeInflationData()</pre>
                <p>Scrapes inflation data from a specific website, processes it, and writes the data to a JSON file.</p>

                <!-- scrapeGasInflationData Function -->
                <h2 id="scrapeGasInflationData">scrapeGasInflationData</h2>
                <pre>func scrapeGasInflationData()</pre>
                <p>Scrapes gasoline price data and adjusts it for inflation. Writes the processed data to a JSON file.</p>

                <!-- scrapeHousingData Function -->
                <h2 id="scrapeHousingData">scrapeHousingData</h2>
                <pre>func scrapeHousingData()</pre>
                <p>Scrapes real estate data from a specific dataset. Processes the data and writes it to a JSON file for housing market analysis.</p>
                <h2 id="scarper-go-variables">Variables in scarper.go</h2>

                <pre>var urlQueue = make(chan string, 1000)</pre>
                <p>A channel used for queuing URLs to be processed by the scraper.</p>

                <pre>var visited = make(map[string]bool)</pre>
                <p>A map used for keeping track of URLs that have already been visited by the scraper.</p>

                <pre>var domainConfigurations = map[string]DomainConfig{ ... }</pre>
                <p>Maps domain names to their respective scraping configurations, specifying selectors and structures for each domain.</p>

                <h3 id="structs-go-types">Types in structs.go</h3>

                <!-- URLData Type -->
                <h2 id="URLData">URLData</h2>
                <pre>type URLData struct { ... }</pre>
                <p>Holds information about a specific URL to be crawled, including the URL itself, creation timestamp, and discovered links.</p>

                <!-- MonthData Type -->
                <h2 id="MonthData">MonthData</h2>
                <pre>type MonthData struct { ... }</pre>
                <p>Represents data for individual months, commonly used in time-series data analyses.</p>

                <!-- AirfareData Type -->
                <h2 id="AirfareData">AirfareData</h2>
                <pre>type AirfareData struct { ... }</pre>
                <p>Represents airfare data structure with details like domain, URL, title, year, location, and additional information.</p>

                <!-- YearData Type -->
                <h2 id="YearData">YearData</h2>
                <pre>type YearData struct { ... }</pre>
                <p>Represents data for each year with monthly breakdown and average values.</p>

                <!-- GasolineData Type -->
                <h2 id="GasolineData">GasolineData</h2>
                <pre>type GasolineData struct { ... }</pre>
                <p>Represents gasoline data structure including year, average prices, CPI, and adjusted prices for inflation.</p>

                <!-- PropertyData Type -->
                <h2 id="PropertyData">PropertyData</h2>
                <pre>type PropertyData struct { ... }</pre>
                <p>Represents property data structure with details like status, bedrooms, bathrooms, lot size, location, and pricing.</p>

                <!-- ScraperConfig Type -->
                <h2 id="ScraperConfig">ScraperConfig</h2>
                <pre>type ScraperConfig struct { ... }</pre>
                <p>Represents configuration for the scraper including starting URLs.</p>

                <!-- DomainConfig Type -->
                <h2 id="DomainConfig">DomainConfig</h2>
                <pre>type DomainConfig struct { ... }</pre>
                <p>Represents configuration for different domains with specific selectors and structures for scraping.</p>

                <!-- Metadata Type -->
                <h2 id="Metadata">Metadata</h2>
                <pre>type Metadata struct { ... }</pre>
                <p>Represents metadata for scraped data including source and timestamp.</p>

                <!-- GenericData Type -->
                <h2 id="GenericData">GenericData</h2>
                <pre>type GenericData struct { ... }</pre>
                <p>Represents a generic data structure for items with details like title, URL, description, and price.</p>

                <!-- ItemData Type -->
                <h2 id="ItemData">ItemData</h2>
                <pre>type ItemData struct { ... }</pre>
                <p>Represents data for an item including domain and an array of GenericData.</p>
                <h3 id="user-agents-go-functions">Functions in user_agents.go</h3>

                <!-- GetRandomUserAgent Function -->
                <h2 id="GetRandomUserAgent">GetRandomUserAgent</h2>
                <pre>func GetRandomUserAgent() string</pre>
                <p>Selects and returns a random user agent string from a predefined list. This function is used to set the user agent in HTTP requests made by the crawler or scraper, helping to mimic real browser behavior and avoid detection by web servers.</p>

                <!-- CARP Package documentation -->
                <h2 id="carp-package">CARP Package</h2>
                <p>Contains functions and types for the CARP web application module.</p>

                <!-- Index for CARP Package -->
                <div id="carp-package-index" class="toggleVisible">
                    <div class="expanded">
                        <h2 class="toggleButton" title="Click to hide Index section">CARP Package Index â–¾</h2>
                        <div id="manual-nav">
                            <dl>
                                <!-- Index for Server.go -->
                                <dt>server.go Functions</dt>
                                <dd><a href="#main">func main()</a></dd>
                                <dd><a href="#setupServer">func setupServer()</a></dd>
                                <dd><a href="#setupRoutes">func setupRoutes(tmpl *template.Template)</a></dd>
                                <dd><a href="#makeHandler">func makeHandler(tmpl *template.Template, content string) http.HandlerFunc</a></dd>
                                <dd><a href="#loginHandler">func loginHandler(tmpl *template.Template, w http.ResponseWriter, r *http.Request)</a></dd>
                                <dd><a href="#registerHandler">func registerHandler(tmpl *template.Template, w http.ResponseWriter, r *http.Request)</a></dd>
                                <dd><a href="#predictionHandler">func predictionHandler(w http.ResponseWriter, r *http.Request)</a></dd>
                                <dd><a href="#dashHandler">func dashHandler(tmpl *template.Template, w http.ResponseWriter, r *http.Request)</a></dd>
                                <!-- More functions as needed... -->

                                <!-- Index for Middleware.go -->
                                <dt>middleware.go Functions</dt>
                                <dd><a href="#serveTemplate">func serveTemplate(content string, loggedIn bool) http.HandlerFunc</a></dd>
                                <dd><a href="#renderTemplate">func renderTemplate(w http.ResponseWriter, tmpl string, data *AuthData)</a></dd>
                                <dd><a href="#handleLogin">func handleLogin(w http.ResponseWriter, r *http.Request)</a></dd>
                                <dd><a href="#requireAdmin">func requireAdmin(next http.HandlerFunc) http.HandlerFunc</a></dd>
                                <dd><a href="#logoutHandler">func logoutHandler(w http.ResponseWriter, r *http.Request)</a></dd>
                                <dd><a href="#extractUserIDFromToken">func extractUserIDFromToken(r *http.Request) (string, error)</a></dd>
                                <!-- More functions as needed... -->
                            </dl>
                        </div><!-- #manual-nav -->
                    </div><!-- .expanded -->
                </div><!-- #carp-package-index -->

                <!-- CARP Package Detailed Documentation -->
                <h3 id="server-go-functions">Functions in server.go</h3>
                <!-- Detailed documentation for each function in server.go -->
                <!-- Example for main function -->
                <h2 id="main">func main()</h2>
                <pre>func main()</pre>
                <p>Main function sets up and starts the server.</p>
                <!-- More detailed documentation for other functions... -->

                <h3 id="middleware-go-functions">Functions in middleware.go</h3>
                <!-- Detailed documentation for each function in middleware.go -->
                <!-- Example for serveTemplate function -->
                <h2 id="serveTemplate">serveTemplate</h2>
                <pre>func serveTemplate(content string, loggedIn bool) http.HandlerFunc</pre>
                <p>Returns an HTTP handler function that renders a template.</p>
                <!-- More detailed documentation for other functions... -->

                <div id="footer">
                    Build version go1.21.1.<br>
                    Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
                    the content of this page is licensed under the
                    Creative Commons Attribution 3.0 License,
                    and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
                    <a href="https://golang.org/doc/tos.html">Terms of Service</a> |
                    <a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
                </div>

            </div><!-- .container -->
        </div><!-- #page -->
{{/*        </body>*/}}
{{/*        </html>*/}}
    </div>
{{ end }}
<!--lol-->
